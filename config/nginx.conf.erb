daemon off;
#Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;

	server_tokens off;

	#log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	#access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	#error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;
  log_format main '$time_iso8601 - $status $request - client IP: $http_x_forwarded_for - <%= ENV['DYNO'] %> to $upstream_addr - upstream status: $upstream_status, upstream_response_time $upstream_response_time, request_time $request_time';
  access_log /dev/stdout main;
  error_log /dev/stdout notice;
  log_not_found on;


	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	#Must read the body in 5 seconds.
  client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  # https://www.fdn.fr/actions/dns/
  resolver 80.67.169.12 80.67.169.40 valid=300s ipv6=on;
  #resolver 2001:910:800::12 valid=300s ipv6=on;
  #resolver 2001:910:800::40 valid=300s ipv6=on;
  resolver_timeout 10s;

  upstream app_server {
		server unix:/tmp/nginx.socket fail_timeout=0;
 	}

	server {
		listen <%= ENV["PORT"] %>;
		server_name _;
		keepalive_timeout 5;

    # app transport on Netlify
    location ~* ^/apps/transport(.*) {
      set $netlify_app 'ecolab-transport.netlify.app';
      set $url_full '$1';
      if ( $url_full = '' ) {
           set $url_full '/';
      }

      proxy_hide_header Set-Cookie;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $host;
      proxy_set_header Host $netlify_app;
      proxy_ignore_headers "Set-Cookie";
      proxy_buffering off;
      proxy_intercept_errors on;
      proxy_redirect off;
      proxy_pass https://$netlify_app$url_full;
    }

		location / {
      proxy_set_header X-Real-IP $remote_addr;
     	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			proxy_pass http://app_server;
		}
	}
}
